{"ast":null,"code":"/**\r\n * @import {Event} from 'micromark-util-types'\r\n */\n\n/**\r\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\r\n */\n\n/**\r\n * Figure out the alignment of a GFM table.\r\n *\r\n * @param {Readonly<Array<Event>>} events\r\n *   List of events.\r\n * @param {number} index\r\n *   Table enter event.\r\n * @returns {Array<Align>}\r\n *   List of aligns.\r\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","map":{"version":3,"names":["gfmTableAlign","events","index","inDelimiterRow","align","length","event","type","push","alignIndex"],"sources":["C:/Users/HP/Documents/GitHub/Smart_Studies_Planner/study-planner-Frontend/node_modules/micromark-extension-gfm-table/lib/infer.js"],"sourcesContent":["/**\r\n * @import {Event} from 'micromark-util-types'\r\n */\r\n\r\n/**\r\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\r\n */\r\n\r\n/**\r\n * Figure out the alignment of a GFM table.\r\n *\r\n * @param {Readonly<Array<Event>>} events\r\n *   List of events.\r\n * @param {number} index\r\n *   Table enter event.\r\n * @returns {Array<Align>}\r\n *   List of aligns.\r\n */\r\nexport function gfmTableAlign(events, index) {\r\n  let inDelimiterRow = false;\r\n  /** @type {Array<Align>} */\r\n  const align = [];\r\n  while (index < events.length) {\r\n    const event = events[index];\r\n    if (inDelimiterRow) {\r\n      if (event[0] === 'enter') {\r\n        // Start of alignment value: set a new column.\r\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\r\n        if (event[1].type === 'tableContent') {\r\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\r\n        }\r\n      }\r\n      // Exits:\r\n      // End of alignment value: change the column.\r\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\r\n      else if (event[1].type === 'tableContent') {\r\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\r\n          const alignIndex = align.length - 1;\r\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\r\n        }\r\n      }\r\n      // Done!\r\n      else if (event[1].type === 'tableDelimiterRow') {\r\n        break;\r\n      }\r\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\r\n      inDelimiterRow = true;\r\n    }\r\n    index += 1;\r\n  }\r\n  return align;\r\n}"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAaA,CAACC,MAAM,EAAEC,KAAK,EAAE;EAC3C,IAAIC,cAAc,GAAG,KAAK;EAC1B;EACA,MAAMC,KAAK,GAAG,EAAE;EAChB,OAAOF,KAAK,GAAGD,MAAM,CAACI,MAAM,EAAE;IAC5B,MAAMC,KAAK,GAAGL,MAAM,CAACC,KAAK,CAAC;IAC3B,IAAIC,cAAc,EAAE;MAClB,IAAIG,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE;QACxB;QACA;QACA,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,KAAK,cAAc,EAAE;UACpCH,KAAK,CAACI,IAAI,CAACP,MAAM,CAACC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACK,IAAI,KAAK,sBAAsB,GAAG,MAAM,GAAG,MAAM,CAAC;QACpF;MACF;MACA;MACA;MACA;MAAA,KACK,IAAID,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,KAAK,cAAc,EAAE;QACzC,IAAIN,MAAM,CAACC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACK,IAAI,KAAK,sBAAsB,EAAE;UACxD,MAAME,UAAU,GAAGL,KAAK,CAACC,MAAM,GAAG,CAAC;UACnCD,KAAK,CAACK,UAAU,CAAC,GAAGL,KAAK,CAACK,UAAU,CAAC,KAAK,MAAM,GAAG,QAAQ,GAAG,OAAO;QACvE;MACF;MACA;MAAA,KACK,IAAIH,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,KAAK,mBAAmB,EAAE;QAC9C;MACF;IACF,CAAC,MAAM,IAAID,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,KAAK,mBAAmB,EAAE;MACxEJ,cAAc,GAAG,IAAI;IACvB;IACAD,KAAK,IAAI,CAAC;EACZ;EACA,OAAOE,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}