{"ast":null,"code":"/**\r\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\r\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\r\n * Create an HTML extension for `micromark` to support GFM task list items\r\n * syntax.\r\n *\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\r\n *   support GFM task list items when serializing to HTML.\r\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\r\n   * At start of task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\r\n   * In task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * At close of task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * @type {State}\r\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\r\n   * After whitespace, after task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","tasklistCheck","name","tokenize","tokenizeTasklistCheck","gfmTaskListItem","text","effects","ok","nok","self","open","code","previous","_gfmTasklistFirstContentOfListItem","enter","consume","exit","inside","close","after","check","spaceThenNonSpace"],"sources":["C:/Users/HP/Documents/GitHub/Smart_Studies_Planner/study-planner-Frontend/node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js"],"sourcesContent":["/**\r\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\r\nconst tasklistCheck = {\r\n  name: 'tasklistCheck',\r\n  tokenize: tokenizeTasklistCheck\r\n};\r\n\r\n/**\r\n * Create an HTML extension for `micromark` to support GFM task list items\r\n * syntax.\r\n *\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\r\n *   support GFM task list items when serializing to HTML.\r\n */\r\nexport function gfmTaskListItem() {\r\n  return {\r\n    text: {\r\n      [91]: tasklistCheck\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeTasklistCheck(effects, ok, nok) {\r\n  const self = this;\r\n  return open;\r\n\r\n  /**\r\n   * At start of task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (\r\n    // Exit if there’s stuff before.\r\n    self.previous !== null ||\r\n    // Exit if not in the first content that is the first child of a list\r\n    // item.\r\n    !self._gfmTasklistFirstContentOfListItem) {\r\n      return nok(code);\r\n    }\r\n    effects.enter('taskListCheck');\r\n    effects.enter('taskListCheckMarker');\r\n    effects.consume(code);\r\n    effects.exit('taskListCheckMarker');\r\n    return inside;\r\n  }\r\n\r\n  /**\r\n   * In task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    // Currently we match how GH works in files.\r\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\r\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\r\n    if (markdownLineEndingOrSpace(code)) {\r\n      effects.enter('taskListCheckValueUnchecked');\r\n      effects.consume(code);\r\n      effects.exit('taskListCheckValueUnchecked');\r\n      return close;\r\n    }\r\n    if (code === 88 || code === 120) {\r\n      effects.enter('taskListCheckValueChecked');\r\n      effects.consume(code);\r\n      effects.exit('taskListCheckValueChecked');\r\n      return close;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * At close of task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function close(code) {\r\n    if (code === 93) {\r\n      effects.enter('taskListCheckMarker');\r\n      effects.consume(code);\r\n      effects.exit('taskListCheckMarker');\r\n      effects.exit('taskListCheck');\r\n      return after;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // EOL in paragraph means there must be something else after it.\r\n    if (markdownLineEnding(code)) {\r\n      return ok(code);\r\n    }\r\n\r\n    // Space or tab?\r\n    // Check what comes after.\r\n    if (markdownSpace(code)) {\r\n      return effects.check({\r\n        tokenize: spaceThenNonSpace\r\n      }, ok, nok)(code);\r\n    }\r\n\r\n    // EOF, or non-whitespace, both wrong.\r\n    return nok(code);\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction spaceThenNonSpace(effects, ok, nok) {\r\n  return factorySpace(effects, after, \"whitespace\");\r\n\r\n  /**\r\n   * After whitespace, after task list item check.\r\n   *\r\n   * ```markdown\r\n   * > | * [x] y.\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // EOF means there was nothing, so bad.\r\n    // EOL means there’s content after it, so good.\r\n    // Impossible to have more spaces.\r\n    // Anything else is good.\r\n    return code === null ? nok(code) : ok(code);\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}