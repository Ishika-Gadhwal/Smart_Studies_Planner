{"ast":null,"code":"/**\r\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\r\n */\n\n/**\r\n * @typedef {[number, number, number, number]} Range\r\n *   Cell info.\r\n *\r\n * @typedef {0 | 1 | 2 | 3} RowKind\r\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\r\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\r\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\r\n *\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\r\n *   table syntax.\r\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\r\n   * Start of a GFM table.\r\n   *\r\n   * If there is a valid table row or table head before, then we try to parse\r\n   * another row.\r\n   * Otherwise, we try to parse a head.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *   | | - |\r\n   * > | | b |\r\n   *     ^\r\n   * ```\r\n   * @type {State}\r\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\r\n   * Before table head row.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\r\n   * Before table head row, after whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\r\n   * At break in table head row.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *       ^\r\n   *         ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\r\n   * In table head row data.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *       ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\r\n   * In table head row escape.\r\n   *\r\n   * ```markdown\r\n   * > | | a\\-b |\r\n   *         ^\r\n   *   | | ---- |\r\n   *   | | c    |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\r\n   * Before delimiter row.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *     ^\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\r\n   * Before delimiter row, after optional whitespace.\r\n   *\r\n   * Reused when a `|` is found later, to parse another cell.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *     ^\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\r\n   * After `|`, before delimiter cell.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\r\n   * Before delimiter cell value.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\r\n   * After delimiter cell left alignment marker.\r\n   *\r\n   * ```markdown\r\n   *   | | a  |\r\n   * > | | :- |\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\r\n   * In delimiter cell filler.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\r\n   * After delimiter cell right alignment marker.\r\n   *\r\n   * ```markdown\r\n   *   | |  a |\r\n   * > | | -: |\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\r\n   * After delimiter cell.\r\n   *\r\n   * ```markdown\r\n   *   | |  a |\r\n   * > | | -: |\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\r\n   * In delimiter row, at a disallowed byte.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | x |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\r\n   * Before table body row.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   *   | | - |\r\n   * > | | b |\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\r\n   * At break in table body row.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   *   | | - |\r\n   * > | | b |\r\n   *     ^\r\n   *       ^\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\r\n   * In table body row data.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   *   | | - |\r\n   * > | | b |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\r\n   * In table body row escape.\r\n   *\r\n   * ```markdown\r\n   *   | | a    |\r\n   *   | | ---- |\r\n   * > | | b\\-c |\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\r\n * Generate a cell.\r\n *\r\n * @param {EditMap} map\r\n * @param {Readonly<TokenizeContext>} context\r\n * @param {Readonly<Range>} range\r\n * @param {RowKind} rowKind\r\n * @param {number | undefined} rowEnd\r\n * @param {Token | undefined} previousCell\r\n * @returns {Token | undefined}\r\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\r\n * Generate table end (and table body end).\r\n *\r\n * @param {Readonly<EditMap>} map\r\n * @param {Readonly<TokenizeContext>} context\r\n * @param {number} index\r\n * @param {Token} table\r\n * @param {Token | undefined} tableBody\r\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\r\n * @param {Readonly<Array<Event>>} events\r\n * @param {number} index\r\n * @returns {Readonly<Point>}\r\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","EditMap","gfmTableAlign","gfmTable","flow","null","name","tokenize","tokenizeTable","resolveAll","resolveTable","effects","ok","nok","self","size","sizeB","seen","start","code","index","events","length","type","tail","next","bodyRowStart","headRowBefore","parser","lazy","now","line","enter","headRowStart","headRowBreak","interrupt","exit","consume","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","constructs","disable","includes","undefined","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","context","inFirstCellAwaitingPipe","rowKind","lastCell","cell","afterHeadAwaitingFirstBodyRow","lastTableEnd","currentTable","currentBody","currentCell","map","event","token","flushTableEnd","Object","assign","end","add","flushCell","_align","range","rowEnd","previousCell","groupName","valueName","getPoint","relatedStart","relatedEnd","valueToken","contentType","a","b","table","tableBody","exits","related","push","side"],"sources":["C:/Users/HP/Documents/GitHub/Smart_Studies_Planner/study-planner-Frontend/node_modules/micromark-extension-gfm-table/lib/syntax.js"],"sourcesContent":["/**\r\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\r\n */\r\n\r\n/**\r\n * @typedef {[number, number, number, number]} Range\r\n *   Cell info.\r\n *\r\n * @typedef {0 | 1 | 2 | 3} RowKind\r\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\r\nimport { EditMap } from './edit-map.js';\r\nimport { gfmTableAlign } from './infer.js';\r\n\r\n/**\r\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\r\n *\r\n * @returns {Extension}\r\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\r\n *   table syntax.\r\n */\r\nexport function gfmTable() {\r\n  return {\r\n    flow: {\r\n      null: {\r\n        name: 'table',\r\n        tokenize: tokenizeTable,\r\n        resolveAll: resolveTable\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeTable(effects, ok, nok) {\r\n  const self = this;\r\n  let size = 0;\r\n  let sizeB = 0;\r\n  /** @type {boolean | undefined} */\r\n  let seen;\r\n  return start;\r\n\r\n  /**\r\n   * Start of a GFM table.\r\n   *\r\n   * If there is a valid table row or table head before, then we try to parse\r\n   * another row.\r\n   * Otherwise, we try to parse a head.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *   | | - |\r\n   * > | | b |\r\n   *     ^\r\n   * ```\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    let index = self.events.length - 1;\r\n    while (index > -1) {\r\n      const type = self.events[index][1].type;\r\n      if (type === \"lineEnding\" ||\r\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\r\n      type === \"linePrefix\") index--;else break;\r\n    }\r\n    const tail = index > -1 ? self.events[index][1].type : null;\r\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\r\n\r\n    // Don’t allow lazy body rows.\r\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\r\n      return nok(code);\r\n    }\r\n    return next(code);\r\n  }\r\n\r\n  /**\r\n   * Before table head row.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowBefore(code) {\r\n    effects.enter('tableHead');\r\n    effects.enter('tableRow');\r\n    return headRowStart(code);\r\n  }\r\n\r\n  /**\r\n   * Before table head row, after whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowStart(code) {\r\n    if (code === 124) {\r\n      return headRowBreak(code);\r\n    }\r\n\r\n    // To do: micromark-js should let us parse our own whitespace in extensions,\r\n    // like `markdown-rs`:\r\n    //\r\n    // ```js\r\n    // // 4+ spaces.\r\n    // if (markdownSpace(code)) {\r\n    //   return nok(code)\r\n    // }\r\n    // ```\r\n\r\n    seen = true;\r\n    // Count the first character, that isn’t a pipe, double.\r\n    sizeB += 1;\r\n    return headRowBreak(code);\r\n  }\r\n\r\n  /**\r\n   * At break in table head row.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *     ^\r\n   *       ^\r\n   *         ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowBreak(code) {\r\n    if (code === null) {\r\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\r\n      return nok(code);\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\r\n      if (sizeB > 1) {\r\n        sizeB = 0;\r\n        // To do: check if this works.\r\n        // Feel free to interrupt:\r\n        self.interrupt = true;\r\n        effects.exit('tableRow');\r\n        effects.enter(\"lineEnding\");\r\n        effects.consume(code);\r\n        effects.exit(\"lineEnding\");\r\n        return headDelimiterStart;\r\n      }\r\n\r\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\r\n      return nok(code);\r\n    }\r\n    if (markdownSpace(code)) {\r\n      // To do: check if this is fine.\r\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\r\n      // State::Retry(space_or_tab(tokenizer))\r\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\r\n    }\r\n    sizeB += 1;\r\n    if (seen) {\r\n      seen = false;\r\n      // Header cell count.\r\n      size += 1;\r\n    }\r\n    if (code === 124) {\r\n      effects.enter('tableCellDivider');\r\n      effects.consume(code);\r\n      effects.exit('tableCellDivider');\r\n      // Whether a delimiter was seen.\r\n      seen = true;\r\n      return headRowBreak;\r\n    }\r\n\r\n    // Anything else is cell data.\r\n    effects.enter(\"data\");\r\n    return headRowData(code);\r\n  }\r\n\r\n  /**\r\n   * In table head row data.\r\n   *\r\n   * ```markdown\r\n   * > | | a |\r\n   *       ^\r\n   *   | | - |\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowData(code) {\r\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\r\n      effects.exit(\"data\");\r\n      return headRowBreak(code);\r\n    }\r\n    effects.consume(code);\r\n    return code === 92 ? headRowEscape : headRowData;\r\n  }\r\n\r\n  /**\r\n   * In table head row escape.\r\n   *\r\n   * ```markdown\r\n   * > | | a\\-b |\r\n   *         ^\r\n   *   | | ---- |\r\n   *   | | c    |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headRowEscape(code) {\r\n    if (code === 92 || code === 124) {\r\n      effects.consume(code);\r\n      return headRowData;\r\n    }\r\n    return headRowData(code);\r\n  }\r\n\r\n  /**\r\n   * Before delimiter row.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *     ^\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterStart(code) {\r\n    // Reset `interrupt`.\r\n    self.interrupt = false;\r\n\r\n    // Note: in `markdown-rs`, we need to handle piercing here too.\r\n    if (self.parser.lazy[self.now().line]) {\r\n      return nok(code);\r\n    }\r\n    effects.enter('tableDelimiterRow');\r\n    // Track if we’ve seen a `:` or `|`.\r\n    seen = false;\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\r\n    }\r\n    return headDelimiterBefore(code);\r\n  }\r\n\r\n  /**\r\n   * Before delimiter row, after optional whitespace.\r\n   *\r\n   * Reused when a `|` is found later, to parse another cell.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *     ^\r\n   *   | | b |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterBefore(code) {\r\n    if (code === 45 || code === 58) {\r\n      return headDelimiterValueBefore(code);\r\n    }\r\n    if (code === 124) {\r\n      seen = true;\r\n      // If we start with a pipe, we open a cell marker.\r\n      effects.enter('tableCellDivider');\r\n      effects.consume(code);\r\n      effects.exit('tableCellDivider');\r\n      return headDelimiterCellBefore;\r\n    }\r\n\r\n    // More whitespace / empty row not allowed at start.\r\n    return headDelimiterNok(code);\r\n  }\r\n\r\n  /**\r\n   * After `|`, before delimiter cell.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterCellBefore(code) {\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\r\n    }\r\n    return headDelimiterValueBefore(code);\r\n  }\r\n\r\n  /**\r\n   * Before delimiter cell value.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterValueBefore(code) {\r\n    // Align: left.\r\n    if (code === 58) {\r\n      sizeB += 1;\r\n      seen = true;\r\n      effects.enter('tableDelimiterMarker');\r\n      effects.consume(code);\r\n      effects.exit('tableDelimiterMarker');\r\n      return headDelimiterLeftAlignmentAfter;\r\n    }\r\n\r\n    // Align: none.\r\n    if (code === 45) {\r\n      sizeB += 1;\r\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\r\n      return headDelimiterLeftAlignmentAfter(code);\r\n    }\r\n    if (code === null || markdownLineEnding(code)) {\r\n      return headDelimiterCellAfter(code);\r\n    }\r\n    return headDelimiterNok(code);\r\n  }\r\n\r\n  /**\r\n   * After delimiter cell left alignment marker.\r\n   *\r\n   * ```markdown\r\n   *   | | a  |\r\n   * > | | :- |\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterLeftAlignmentAfter(code) {\r\n    if (code === 45) {\r\n      effects.enter('tableDelimiterFiller');\r\n      return headDelimiterFiller(code);\r\n    }\r\n\r\n    // Anything else is not ok after the left-align colon.\r\n    return headDelimiterNok(code);\r\n  }\r\n\r\n  /**\r\n   * In delimiter cell filler.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | - |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterFiller(code) {\r\n    if (code === 45) {\r\n      effects.consume(code);\r\n      return headDelimiterFiller;\r\n    }\r\n\r\n    // Align is `center` if it was `left`, `right` otherwise.\r\n    if (code === 58) {\r\n      seen = true;\r\n      effects.exit('tableDelimiterFiller');\r\n      effects.enter('tableDelimiterMarker');\r\n      effects.consume(code);\r\n      effects.exit('tableDelimiterMarker');\r\n      return headDelimiterRightAlignmentAfter;\r\n    }\r\n    effects.exit('tableDelimiterFiller');\r\n    return headDelimiterRightAlignmentAfter(code);\r\n  }\r\n\r\n  /**\r\n   * After delimiter cell right alignment marker.\r\n   *\r\n   * ```markdown\r\n   *   | |  a |\r\n   * > | | -: |\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterRightAlignmentAfter(code) {\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\r\n    }\r\n    return headDelimiterCellAfter(code);\r\n  }\r\n\r\n  /**\r\n   * After delimiter cell.\r\n   *\r\n   * ```markdown\r\n   *   | |  a |\r\n   * > | | -: |\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterCellAfter(code) {\r\n    if (code === 124) {\r\n      return headDelimiterBefore(code);\r\n    }\r\n    if (code === null || markdownLineEnding(code)) {\r\n      // Exit when:\r\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\r\n      //   underline instead)\r\n      // * the header cell count is not the delimiter cell count\r\n      if (!seen || size !== sizeB) {\r\n        return headDelimiterNok(code);\r\n      }\r\n\r\n      // Note: in markdown-rs`, a reset is needed here.\r\n      effects.exit('tableDelimiterRow');\r\n      effects.exit('tableHead');\r\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\r\n      // effects.register_resolver(ResolveName::GfmTable)\r\n      return ok(code);\r\n    }\r\n    return headDelimiterNok(code);\r\n  }\r\n\r\n  /**\r\n   * In delimiter row, at a disallowed byte.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   * > | | x |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function headDelimiterNok(code) {\r\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * Before table body row.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   *   | | - |\r\n   * > | | b |\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function bodyRowStart(code) {\r\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\r\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\r\n    // never at whitespace.\r\n    effects.enter('tableRow');\r\n    return bodyRowBreak(code);\r\n  }\r\n\r\n  /**\r\n   * At break in table body row.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   *   | | - |\r\n   * > | | b |\r\n   *     ^\r\n   *       ^\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function bodyRowBreak(code) {\r\n    if (code === 124) {\r\n      effects.enter('tableCellDivider');\r\n      effects.consume(code);\r\n      effects.exit('tableCellDivider');\r\n      return bodyRowBreak;\r\n    }\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('tableRow');\r\n      return ok(code);\r\n    }\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\r\n    }\r\n\r\n    // Anything else is cell content.\r\n    effects.enter(\"data\");\r\n    return bodyRowData(code);\r\n  }\r\n\r\n  /**\r\n   * In table body row data.\r\n   *\r\n   * ```markdown\r\n   *   | | a |\r\n   *   | | - |\r\n   * > | | b |\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function bodyRowData(code) {\r\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\r\n      effects.exit(\"data\");\r\n      return bodyRowBreak(code);\r\n    }\r\n    effects.consume(code);\r\n    return code === 92 ? bodyRowEscape : bodyRowData;\r\n  }\r\n\r\n  /**\r\n   * In table body row escape.\r\n   *\r\n   * ```markdown\r\n   *   | | a    |\r\n   *   | | ---- |\r\n   * > | | b\\-c |\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function bodyRowEscape(code) {\r\n    if (code === 92 || code === 124) {\r\n      effects.consume(code);\r\n      return bodyRowData;\r\n    }\r\n    return bodyRowData(code);\r\n  }\r\n}\r\n\r\n/** @type {Resolver} */\r\n\r\nfunction resolveTable(events, context) {\r\n  let index = -1;\r\n  let inFirstCellAwaitingPipe = true;\r\n  /** @type {RowKind} */\r\n  let rowKind = 0;\r\n  /** @type {Range} */\r\n  let lastCell = [0, 0, 0, 0];\r\n  /** @type {Range} */\r\n  let cell = [0, 0, 0, 0];\r\n  let afterHeadAwaitingFirstBodyRow = false;\r\n  let lastTableEnd = 0;\r\n  /** @type {Token | undefined} */\r\n  let currentTable;\r\n  /** @type {Token | undefined} */\r\n  let currentBody;\r\n  /** @type {Token | undefined} */\r\n  let currentCell;\r\n  const map = new EditMap();\r\n  while (++index < events.length) {\r\n    const event = events[index];\r\n    const token = event[1];\r\n    if (event[0] === 'enter') {\r\n      // Start of head.\r\n      if (token.type === 'tableHead') {\r\n        afterHeadAwaitingFirstBodyRow = false;\r\n\r\n        // Inject previous (body end and) table end.\r\n        if (lastTableEnd !== 0) {\r\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\r\n          currentBody = undefined;\r\n          lastTableEnd = 0;\r\n        }\r\n\r\n        // Inject table start.\r\n        currentTable = {\r\n          type: 'table',\r\n          start: Object.assign({}, token.start),\r\n          // Note: correct end is set later.\r\n          end: Object.assign({}, token.end)\r\n        };\r\n        map.add(index, 0, [['enter', currentTable, context]]);\r\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\r\n        inFirstCellAwaitingPipe = true;\r\n        currentCell = undefined;\r\n        lastCell = [0, 0, 0, 0];\r\n        cell = [0, index + 1, 0, 0];\r\n\r\n        // Inject table body start.\r\n        if (afterHeadAwaitingFirstBodyRow) {\r\n          afterHeadAwaitingFirstBodyRow = false;\r\n          currentBody = {\r\n            type: 'tableBody',\r\n            start: Object.assign({}, token.start),\r\n            // Note: correct end is set later.\r\n            end: Object.assign({}, token.end)\r\n          };\r\n          map.add(index, 0, [['enter', currentBody, context]]);\r\n        }\r\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\r\n      }\r\n      // Cell data.\r\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\r\n        inFirstCellAwaitingPipe = false;\r\n\r\n        // First value in cell.\r\n        if (cell[2] === 0) {\r\n          if (lastCell[1] !== 0) {\r\n            cell[0] = cell[1];\r\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\r\n            lastCell = [0, 0, 0, 0];\r\n          }\r\n          cell[2] = index;\r\n        }\r\n      } else if (token.type === 'tableCellDivider') {\r\n        if (inFirstCellAwaitingPipe) {\r\n          inFirstCellAwaitingPipe = false;\r\n        } else {\r\n          if (lastCell[1] !== 0) {\r\n            cell[0] = cell[1];\r\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\r\n          }\r\n          lastCell = cell;\r\n          cell = [lastCell[1], index, 0, 0];\r\n        }\r\n      }\r\n    }\r\n    // Exit events.\r\n    else if (token.type === 'tableHead') {\r\n      afterHeadAwaitingFirstBodyRow = true;\r\n      lastTableEnd = index;\r\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\r\n      lastTableEnd = index;\r\n      if (lastCell[1] !== 0) {\r\n        cell[0] = cell[1];\r\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\r\n      } else if (cell[1] !== 0) {\r\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\r\n      }\r\n      rowKind = 0;\r\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\r\n      cell[3] = index;\r\n    }\r\n  }\r\n  if (lastTableEnd !== 0) {\r\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\r\n  }\r\n  map.consume(context.events);\r\n\r\n  // To do: move this into `html`, when events are exposed there.\r\n  // That’s what `markdown-rs` does.\r\n  // That needs updates to `mdast-util-gfm-table`.\r\n  index = -1;\r\n  while (++index < context.events.length) {\r\n    const event = context.events[index];\r\n    if (event[0] === 'enter' && event[1].type === 'table') {\r\n      event[1]._align = gfmTableAlign(context.events, index);\r\n    }\r\n  }\r\n  return events;\r\n}\r\n\r\n/**\r\n * Generate a cell.\r\n *\r\n * @param {EditMap} map\r\n * @param {Readonly<TokenizeContext>} context\r\n * @param {Readonly<Range>} range\r\n * @param {RowKind} rowKind\r\n * @param {number | undefined} rowEnd\r\n * @param {Token | undefined} previousCell\r\n * @returns {Token | undefined}\r\n */\r\n// eslint-disable-next-line max-params\r\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\r\n  // `markdown-rs` uses:\r\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\r\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\r\n  // `markdown-rs` uses:\r\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\r\n  const valueName = 'tableContent';\r\n\r\n  // Insert an exit for the previous cell, if there is one.\r\n  //\r\n  // ```markdown\r\n  // > | | aa | bb | cc |\r\n  //          ^-- exit\r\n  //           ^^^^-- this cell\r\n  // ```\r\n  if (range[0] !== 0) {\r\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\r\n    map.add(range[0], 0, [['exit', previousCell, context]]);\r\n  }\r\n\r\n  // Insert enter of this cell.\r\n  //\r\n  // ```markdown\r\n  // > | | aa | bb | cc |\r\n  //           ^-- enter\r\n  //           ^^^^-- this cell\r\n  // ```\r\n  const now = getPoint(context.events, range[1]);\r\n  previousCell = {\r\n    type: groupName,\r\n    start: Object.assign({}, now),\r\n    // Note: correct end is set later.\r\n    end: Object.assign({}, now)\r\n  };\r\n  map.add(range[1], 0, [['enter', previousCell, context]]);\r\n\r\n  // Insert text start at first data start and end at last data end, and\r\n  // remove events between.\r\n  //\r\n  // ```markdown\r\n  // > | | aa | bb | cc |\r\n  //            ^-- enter\r\n  //             ^-- exit\r\n  //           ^^^^-- this cell\r\n  // ```\r\n  if (range[2] !== 0) {\r\n    const relatedStart = getPoint(context.events, range[2]);\r\n    const relatedEnd = getPoint(context.events, range[3]);\r\n    /** @type {Token} */\r\n    const valueToken = {\r\n      type: valueName,\r\n      start: Object.assign({}, relatedStart),\r\n      end: Object.assign({}, relatedEnd)\r\n    };\r\n    map.add(range[2], 0, [['enter', valueToken, context]]);\r\n    if (rowKind !== 2) {\r\n      // Fix positional info on remaining events\r\n      const start = context.events[range[2]];\r\n      const end = context.events[range[3]];\r\n      start[1].end = Object.assign({}, end[1].end);\r\n      start[1].type = \"chunkText\";\r\n      start[1].contentType = \"text\";\r\n\r\n      // Remove if needed.\r\n      if (range[3] > range[2] + 1) {\r\n        const a = range[2] + 1;\r\n        const b = range[3] - range[2] - 1;\r\n        map.add(a, b, []);\r\n      }\r\n    }\r\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\r\n  }\r\n\r\n  // Insert an exit for the last cell, if at the row end.\r\n  //\r\n  // ```markdown\r\n  // > | | aa | bb | cc |\r\n  //                    ^-- exit\r\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\r\n  // ```\r\n  if (rowEnd !== undefined) {\r\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\r\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\r\n    previousCell = undefined;\r\n  }\r\n  return previousCell;\r\n}\r\n\r\n/**\r\n * Generate table end (and table body end).\r\n *\r\n * @param {Readonly<EditMap>} map\r\n * @param {Readonly<TokenizeContext>} context\r\n * @param {number} index\r\n * @param {Token} table\r\n * @param {Token | undefined} tableBody\r\n */\r\n// eslint-disable-next-line max-params\r\nfunction flushTableEnd(map, context, index, table, tableBody) {\r\n  /** @type {Array<Event>} */\r\n  const exits = [];\r\n  const related = getPoint(context.events, index);\r\n  if (tableBody) {\r\n    tableBody.end = Object.assign({}, related);\r\n    exits.push(['exit', tableBody, context]);\r\n  }\r\n  table.end = Object.assign({}, related);\r\n  exits.push(['exit', table, context]);\r\n  map.add(index + 1, 0, exits);\r\n}\r\n\r\n/**\r\n * @param {Readonly<Array<Event>>} events\r\n * @param {number} index\r\n * @returns {Readonly<Point>}\r\n */\r\nfunction getPoint(events, index) {\r\n  const event = events[index];\r\n  const side = event[0] === 'enter' ? 'start' : 'end';\r\n  return event[1][side];\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}