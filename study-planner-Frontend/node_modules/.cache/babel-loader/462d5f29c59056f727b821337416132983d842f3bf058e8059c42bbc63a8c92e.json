{"ast":null,"code":"/**\r\n * @callback Handler\r\n *   Handle a value, with a certain ID field set to a certain value.\r\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\r\n *   place on the `handlers` record.\r\n * @param {...any} parameters\r\n *   Arbitrary parameters passed to the zwitch.\r\n *   The first will be an object with a certain ID field set to a certain value.\r\n * @returns {any}\r\n *   Anything!\r\n */\n\n/**\r\n * @callback UnknownHandler\r\n *   Handle values that do have a certain ID field, but it’s set to a value\r\n *   that is not listed in the `handlers` record.\r\n * @param {unknown} value\r\n *   An object with a certain ID field set to an unknown value.\r\n * @param {...any} rest\r\n *   Arbitrary parameters passed to the zwitch.\r\n * @returns {any}\r\n *   Anything!\r\n */\n\n/**\r\n * @callback InvalidHandler\r\n *   Handle values that do not have a certain ID field.\r\n * @param {unknown} value\r\n *   Any unknown value.\r\n * @param {...any} rest\r\n *   Arbitrary parameters passed to the zwitch.\r\n * @returns {void|null|undefined|never}\r\n *   This should crash or return nothing.\r\n */\n\n/**\r\n * @template {InvalidHandler} [Invalid=InvalidHandler]\r\n * @template {UnknownHandler} [Unknown=UnknownHandler]\r\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\r\n * @typedef Options\r\n *   Configuration (required).\r\n * @property {Invalid} [invalid]\r\n *   Handler to use for invalid values.\r\n * @property {Unknown} [unknown]\r\n *   Handler to use for unknown values.\r\n * @property {Handlers} [handlers]\r\n *   Handlers to use.\r\n */\n\nconst own = {}.hasOwnProperty;\n\n/**\r\n * Handle values based on a field.\r\n *\r\n * @template {InvalidHandler} [Invalid=InvalidHandler]\r\n * @template {UnknownHandler} [Unknown=UnknownHandler]\r\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\r\n * @param {string} key\r\n *   Field to switch on.\r\n * @param {Options<Invalid, Unknown, Handlers>} [options]\r\n *   Configuration (required).\r\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\r\n */\nexport function zwitch(key, options) {\n  const settings = options || {};\n\n  /**\r\n   * Handle one value.\r\n   *\r\n   * Based on the bound `key`, a respective handler will be called.\r\n   * If `value` is not an object, or doesn’t have a `key` property, the special\r\n   * “invalid” handler will be called.\r\n   * If `value` has an unknown `key`, the special “unknown” handler will be\r\n   * called.\r\n   *\r\n   * All arguments, and the context object, are passed through to the handler,\r\n   * and it’s result is returned.\r\n   *\r\n   * @this {unknown}\r\n   *   Any context object.\r\n   * @param {unknown} [value]\r\n   *   Any value.\r\n   * @param {...unknown} parameters\r\n   *   Arbitrary parameters passed to the zwitch.\r\n   * @property {Handler} invalid\r\n   *   Handle for values that do not have a certain ID field.\r\n   * @property {Handler} unknown\r\n   *   Handle values that do have a certain ID field, but it’s set to a value\r\n   *   that is not listed in the `handlers` record.\r\n   * @property {Handlers} handlers\r\n   *   Record of handlers.\r\n   * @returns {unknown}\r\n   *   Anything.\r\n   */\n  function one(value) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid;\n    const handlers = one.handlers;\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key]);\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown;\n    }\n    if (fn) {\n      for (var _len = arguments.length, parameters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        parameters[_key - 1] = arguments[_key];\n      }\n      return fn.call(this, value, ...parameters);\n    }\n  }\n  one.handlers = settings.handlers || {};\n  one.invalid = settings.invalid;\n  one.unknown = settings.unknown;\n\n  // @ts-expect-error: matches!\n  return one;\n}","map":{"version":3,"names":["own","hasOwnProperty","zwitch","key","options","settings","one","value","fn","invalid","handlers","call","id","String","unknown","_len","arguments","length","parameters","Array","_key"],"sources":["C:/Users/HP/Documents/GitHub/Smart_Studies_Planner/study-planner-Frontend/node_modules/zwitch/index.js"],"sourcesContent":["/**\r\n * @callback Handler\r\n *   Handle a value, with a certain ID field set to a certain value.\r\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\r\n *   place on the `handlers` record.\r\n * @param {...any} parameters\r\n *   Arbitrary parameters passed to the zwitch.\r\n *   The first will be an object with a certain ID field set to a certain value.\r\n * @returns {any}\r\n *   Anything!\r\n */\r\n\r\n/**\r\n * @callback UnknownHandler\r\n *   Handle values that do have a certain ID field, but it’s set to a value\r\n *   that is not listed in the `handlers` record.\r\n * @param {unknown} value\r\n *   An object with a certain ID field set to an unknown value.\r\n * @param {...any} rest\r\n *   Arbitrary parameters passed to the zwitch.\r\n * @returns {any}\r\n *   Anything!\r\n */\r\n\r\n/**\r\n * @callback InvalidHandler\r\n *   Handle values that do not have a certain ID field.\r\n * @param {unknown} value\r\n *   Any unknown value.\r\n * @param {...any} rest\r\n *   Arbitrary parameters passed to the zwitch.\r\n * @returns {void|null|undefined|never}\r\n *   This should crash or return nothing.\r\n */\r\n\r\n/**\r\n * @template {InvalidHandler} [Invalid=InvalidHandler]\r\n * @template {UnknownHandler} [Unknown=UnknownHandler]\r\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\r\n * @typedef Options\r\n *   Configuration (required).\r\n * @property {Invalid} [invalid]\r\n *   Handler to use for invalid values.\r\n * @property {Unknown} [unknown]\r\n *   Handler to use for unknown values.\r\n * @property {Handlers} [handlers]\r\n *   Handlers to use.\r\n */\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Handle values based on a field.\r\n *\r\n * @template {InvalidHandler} [Invalid=InvalidHandler]\r\n * @template {UnknownHandler} [Unknown=UnknownHandler]\r\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\r\n * @param {string} key\r\n *   Field to switch on.\r\n * @param {Options<Invalid, Unknown, Handlers>} [options]\r\n *   Configuration (required).\r\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\r\n */\r\nexport function zwitch(key, options) {\r\n  const settings = options || {}\r\n\r\n  /**\r\n   * Handle one value.\r\n   *\r\n   * Based on the bound `key`, a respective handler will be called.\r\n   * If `value` is not an object, or doesn’t have a `key` property, the special\r\n   * “invalid” handler will be called.\r\n   * If `value` has an unknown `key`, the special “unknown” handler will be\r\n   * called.\r\n   *\r\n   * All arguments, and the context object, are passed through to the handler,\r\n   * and it’s result is returned.\r\n   *\r\n   * @this {unknown}\r\n   *   Any context object.\r\n   * @param {unknown} [value]\r\n   *   Any value.\r\n   * @param {...unknown} parameters\r\n   *   Arbitrary parameters passed to the zwitch.\r\n   * @property {Handler} invalid\r\n   *   Handle for values that do not have a certain ID field.\r\n   * @property {Handler} unknown\r\n   *   Handle values that do have a certain ID field, but it’s set to a value\r\n   *   that is not listed in the `handlers` record.\r\n   * @property {Handlers} handlers\r\n   *   Record of handlers.\r\n   * @returns {unknown}\r\n   *   Anything.\r\n   */\r\n  function one(value, ...parameters) {\r\n    /** @type {Handler|undefined} */\r\n    let fn = one.invalid\r\n    const handlers = one.handlers\r\n\r\n    if (value && own.call(value, key)) {\r\n      // @ts-expect-error Indexable.\r\n      const id = String(value[key])\r\n      // @ts-expect-error Indexable.\r\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\r\n    }\r\n\r\n    if (fn) {\r\n      return fn.call(this, value, ...parameters)\r\n    }\r\n  }\r\n\r\n  one.handlers = settings.handlers || {}\r\n  one.invalid = settings.invalid\r\n  one.unknown = settings.unknown\r\n\r\n  // @ts-expect-error: matches!\r\n  return one\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,CAAC,CAAC,CAACC,cAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,GAAG,EAAEC,OAAO,EAAE;EACnC,MAAMC,QAAQ,GAAGD,OAAO,IAAI,CAAC,CAAC;;EAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASE,GAAGA,CAACC,KAAK,EAAiB;IACjC;IACA,IAAIC,EAAE,GAAGF,GAAG,CAACG,OAAO;IACpB,MAAMC,QAAQ,GAAGJ,GAAG,CAACI,QAAQ;IAE7B,IAAIH,KAAK,IAAIP,GAAG,CAACW,IAAI,CAACJ,KAAK,EAAEJ,GAAG,CAAC,EAAE;MACjC;MACA,MAAMS,EAAE,GAAGC,MAAM,CAACN,KAAK,CAACJ,GAAG,CAAC,CAAC;MAC7B;MACAK,EAAE,GAAGR,GAAG,CAACW,IAAI,CAACD,QAAQ,EAAEE,EAAE,CAAC,GAAGF,QAAQ,CAACE,EAAE,CAAC,GAAGN,GAAG,CAACQ,OAAO;IAC1D;IAEA,IAAIN,EAAE,EAAE;MAAA,SAAAO,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAZaC,UAAU,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAVF,UAAU,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;MAAA;MAa7B,OAAOZ,EAAE,CAACG,IAAI,CAAC,IAAI,EAAEJ,KAAK,EAAE,GAAGW,UAAU,CAAC;IAC5C;EACF;EAEAZ,GAAG,CAACI,QAAQ,GAAGL,QAAQ,CAACK,QAAQ,IAAI,CAAC,CAAC;EACtCJ,GAAG,CAACG,OAAO,GAAGJ,QAAQ,CAACI,OAAO;EAC9BH,GAAG,CAACQ,OAAO,GAAGT,QAAQ,CAACS,OAAO;;EAE9B;EACA,OAAOR,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}